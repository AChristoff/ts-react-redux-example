[{"/home/aleksov/Programming/Projects/ts-react-example/src/index.tsx":"1","/home/aleksov/Programming/Projects/ts-react-example/src/App.tsx":"2","/home/aleksov/Programming/Projects/ts-react-example/src/reportWebVitals.ts":"3","/home/aleksov/Programming/Projects/ts-react-example/src/redux/reducers/userReducers.ts":"4","/home/aleksov/Programming/Projects/ts-react-example/src/redux/constants/userConstants.ts":"5","/home/aleksov/Programming/Projects/ts-react-example/src/redux/store.ts":"6","/home/aleksov/Programming/Projects/ts-react-example/src/screens/LoginScreen.tsx":"7","/home/aleksov/Programming/Projects/ts-react-example/src/redux/actions/userActions.ts":"8","/home/aleksov/Programming/Projects/ts-react-example/src/redux/reducers/index.ts":"9","/home/aleksov/Programming/Projects/ts-react-example/src/redux/index.ts":"10"},{"size":410,"mtime":1611318055194,"results":"11","hashOfConfig":"12"},{"size":185,"mtime":1611318055194,"results":"13","hashOfConfig":"12"},{"size":425,"mtime":1611168277971,"results":"14","hashOfConfig":"12"},{"size":754,"mtime":1611318055194,"results":"15","hashOfConfig":"12"},{"size":9,"mtime":1611318055194,"results":"16","hashOfConfig":"12"},{"size":392,"mtime":1611318055194,"results":"17","hashOfConfig":"12"},{"size":1400,"mtime":1611318055194,"results":"18","hashOfConfig":"12"},{"size":1403,"mtime":1611318055194,"results":"19","hashOfConfig":"12"},{"size":241,"mtime":1611318055194,"results":"20","hashOfConfig":"12"},{"size":88,"mtime":1611318055194,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oj13rx",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/aleksov/Programming/Projects/ts-react-example/src/index.tsx",[],"/home/aleksov/Programming/Projects/ts-react-example/src/App.tsx",[],["45","46"],"/home/aleksov/Programming/Projects/ts-react-example/src/reportWebVitals.ts",[],"/home/aleksov/Programming/Projects/ts-react-example/src/redux/reducers/userReducers.ts",[],"/home/aleksov/Programming/Projects/ts-react-example/src/redux/constants/userConstants.ts",[],"/home/aleksov/Programming/Projects/ts-react-example/src/redux/store.ts",["47"],"import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { rootReducer } from './reducers'\n\nconst initialState = {}\n\nconst middleware = [thunk]\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport { store }\n","/home/aleksov/Programming/Projects/ts-react-example/src/screens/LoginScreen.tsx",["48"],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ApplicationState, onLogin } from '../redux'\n\nconst LoginScreen = () => {\n  const [email, setEmail] = useState('test@test.com')\n  const [password, setPassword] = useState('1234567')\n\n  const dispatch = useDispatch()\n\n  const { loading, error, user } = useSelector((state: ApplicationState) => state.UserReducer )\n  const { token } = user;\n  console.log(token);\n  \n\n  const submitHandler = (e: any) => {\n    e.preventDefault()\n\n    dispatch(onLogin(email, password))\n  }\n\n  return (\n    <div>\n      <p>Login Screen</p>\n      <form onSubmit={submitHandler}>\n        <p>\n          <label htmlFor='email'>Email</label>\n          <input\n            id='email'\n            type='text'\n            name='email'\n            placeholder='john@example.com'\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </p>\n        <p>\n          <label htmlFor='password'>Password</label>\n          <input\n            id='password'\n            type='text'\n            name='password'\n            placeholder='Min 6 chars'\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </p>\n        <button type=\"submit\">Login</button>\n      </form>\n      {loading && <h3>LOADING...</h3>}\n      {error && <h3>LOGIN FAILED!</h3>}\n    </div>\n  )\n}\n\nexport default LoginScreen\n","/home/aleksov/Programming/Projects/ts-react-example/src/redux/actions/userActions.ts",[],"/home/aleksov/Programming/Projects/ts-react-example/src/redux/reducers/index.ts",[],"/home/aleksov/Programming/Projects/ts-react-example/src/redux/index.ts",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":23,"nodeType":"55","messageId":"56","endLine":1,"endColumn":38},{"ruleId":"53","severity":1,"message":"57","line":1,"column":20,"nodeType":"55","messageId":"56","endLine":1,"endColumn":29},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"@typescript-eslint/no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]